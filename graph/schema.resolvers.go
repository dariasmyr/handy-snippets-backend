package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"pastebin/graph/model"
)

func (r *mutationResolver) CreateDocument(ctx context.Context, input model.CreateDocumentInput) (*int, error) {
	fmt.Println(input)

	// Установка дефолтного значения для title
	title := input.Title
	if title == nil {
		defaultTitle := "Test Title"
		title = &defaultTitle
	}
	fmt.Println(*title)

	// Установка дефолтного значения для maxViewCount
	maxViewCount := input.MaxViewCount

	// Установка дефолтного значения для ttlMs
	ttlMs := input.TTLMs

	fmt.Println(input.Value, *title, input.AccessKey, *maxViewCount, *ttlMs)

	id, err := r.DocumentService.CreateDocument(input.Value, *title, input.AccessKey, *maxViewCount, *ttlMs)
	if err != nil {
		return nil, err
	}
	return &id, nil
}

func (r *mutationResolver) DeleteDocument(ctx context.Context, id int, accessKey string) (*bool, error) {
	success, err := r.DocumentService.DeleteDocument(id, accessKey)
	if err != nil {
		return nil, err
	}
	return &success, nil
}

func (r *queryResolver) GetDocument(ctx context.Context, id int) (*model.Document, error) {
	doc, err := r.DocumentService.GetDocument(id)
	if err != nil {
		return nil, err
	}
	return doc, nil
}

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
func (r *Resolver) Query() QueryResolver       { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
